2.1 List集合概述和特点
    List集合概述
        有序集合（也称为序列），用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元索
        与Set集合不同，列表通常允许重复的元素
    List集合特点
        有序：存储和取出的元素顺序一致
        可重复：存储的元素可以重复


2.2 List集合特有方法
            方法名                                       说明
    void add(int index, E element)          在此集合中的指定位置插入指定的元素
    E remove(int index)                     删除指定索引处的元素，返回被删除的元素
    E set(int index,E element)              修改指定索引处的元素，返回被修改的元素
    E get(int index)                        返回指定索引处的元素

案例：List集合存储学生对象并遍历
    需求：创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合
    思路：
        ①定义学生类
        ②创建List集合对象
        ③创建学生对象
        ④把学生添加到集合
        ⑤遍历集合（迭代器方式，for循环方式）


2.3 并发修改异常
    并发修改异常
        .ConcurrentModificationException
    产生原因
        迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致
    解决方案
        用for循环遍历，然后用集合对象做对应的操作即可


2.4 Listlterator
    Listlterator:列表迭代器
        通过List集合的 listlterator()方法得到，所以说它是List集合特有的迭代器
        用于允许程序员沿任一方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置
    Listlterator中的常用方法
        E next():返回迭代中的下一个元素
        boolean hasNext():如果达代具有更多元素，则返回true
        E previous():返回列表中的上一个元素
        boolean hasPrevious():如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true
        void add(E e):将指定的元素插入列表

2.5 增强for循环
    增强for:简化数组和 Collection集合的遍历
        实现 Iterable接口的类允许其对象成为增强型for语句的目标
        它是JDK5之后出现的，其内部原理是一个 Iterator迭代器
    增强for的格式
        格式：
            for(元素数据类型变量名：数组或者Collection集合){
                //在此处使用变量即可，该变量就是元素
            }
        范例：
            int[] arr = [1, 2, 3, 4, 5]:
            for(int i: arr){
                System.out.println(i);
            }

2.6 数据结构
    数据结构是计算机存储、组织数据的方式。是指相互之间存在一种或多种特定关系的数据元素的集合
    通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率

2.7 常见数据结构之栈
    数据进入栈模型的过程称为：压/进栈
    数据离开栈模型的过程称为：弹/出栈
    栈是一种数据先进后出的模型

2.8 常见数据结构之队列
    数据从后端进入队列模型的过程称为：入队列
    数据从前端离开队列模型的过程称为：出队列
    队列是一种数据先进先出的模型

2.9 常见数据结构之数组
    查询数据通过索引定位，查询任意数据耗时相同，查询效率高
    删除数据时，要将原始数据删除，同时后面每个数据前移，删除效率低
    添加数据时，添加位置后的每个数据后移，再添加元素，添加效率极低

2.10 常见数据结构之链表
    链表的每个元素称为结点
    结点的存储位置（地址）：包含数据和地址
        数据：储存的具体的数据
        地址：本节点的地址和下一个结点的地址
    头节点：
        结点指向空地址，用以表示结束。
    链表是一种增删快的模型（对比数组）
    链表是一种查询慢的模型（对比数组）

2.11 List集合子类特点
    List集合常用了类： ArrayList, LinkedList
    ArrayList:底层数据结构是数组，查询快，增测慢
    LinkedList:底层数据结构是链表，查询慢小增删快

2.12 LinkedList集合的特有功能
            方法名                                说明
    public void addFirst(E e)           在该列表开头插入指定的元素
    public void addLast(Ee)             将指定的元素追加到此列表的末尾
    public E getFirst()                 返回此列表中的第一个元索
    public E getLast()                  返回此列表中的最后一个元素
    public E removeFirst()              从此列表中删除并返回第一个元素
    public E removeLast()               从此列表中册删除并返回最后一个元素
